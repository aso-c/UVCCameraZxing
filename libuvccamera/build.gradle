apply plugin: 'com.android.library'
/*
 *  UVCCamera
 *  library and sample to access to UVC web camera on non-rooted Android device
 *
 * Copyright (c) 2014-2017 saki t_saki@serenegiant.com
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *  All files in the folder are under this Apache License, Version 2.0.
 *  Files in the libjpeg-turbo, libusb, libuvc, rapidjson folder
 *  may have a different license, see the respective files.
 */


//// in root build.gradle at UVCCamera project
//ext {
//    supportLibVersion = '27.1.1'  // variable that can be referenced to keep support libs consistent
//	commonLibVersion= '2.12.4'
//	versionBuildTool = '27.0.3'
//	versionCompiler = 27
//	versionTarget = 27
////	versionNameString = '1.0.0'
//	javaSourceCompatibility = JavaVersion.VERSION_1_8
//	javaTargetCompatibility = JavaVersion.VERSION_1_8
//}



android {
//    compileSdkVersion 25
	compileSdkVersion versionCompiler
//    buildToolsVersion "25.0.3"
	buildToolsVersion versionBuildTool

/*
// in root build.gradle at UVCCamera project
//ext {
//	supportLibVersion = '27.1.1'  // variable that can be referenced to keep support libs consistent
//	commonLibVersion= '2.12.4'
//	versionBuildTool = '27.0.3'
//	versionCompiler = 27
//	versionTarget = 27
//	versionNameString = '1.0.0'
//	javaSourceCompatibility = JavaVersion.VERSION_1_8
//	javaTargetCompatibility = JavaVersion.VERSION_1_8
//}
*/


	compileOptions {
		sourceCompatibility javaSourceCompatibility
		targetCompatibility javaTargetCompatibility
	}

    defaultConfig {
        minSdkVersion 14
        //noinspection ExpiredTargetSdkVersion
//        targetSdkVersion 23
		targetSdkVersion versionTarget
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
	sourceSets {
		main {
			jniLibs.srcDir 'src/main/libs'
			jni.srcDirs = []
		}
	}
}



// in root build.gradle at UVCCamera project
//task clean(type: Delete) {
//	delete rootProject.buildDir
//}


/*tasks.withType(JavaCompile) {
	compileTask -> compileTask.dependsOn ndkBuild
}

String getNdkBuildPath() {
	Properties properties = new Properties()
	properties.load(project.rootProject.file('local.properties').newDataInputStream())
	def ndkBuildingDir = properties.getProperty("ndk.dir")
//	//def ndkBuildingDir = project.plugins.findPlugin('com.android.library').sdkHandler.getNdkFolder().absolutePath
	def ndkBuildPath = ndkBuildingDir
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		ndkBuildPath = ndkBuildingDir + '/ndk-build.cmd'
	} else {
		ndkBuildPath = ndkBuildingDir + '/ndk-build'
	}
	return ndkBuildPath
}

task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
	println('executing ndkBuild')
//	def ndkBuildingDir = project.plugins.findPlugin('com.android.library').sdkHandler.getNdkFolder().absolutePath
//	def ndkBuildPath = ndkBuildingDir
//	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//		ndkBuildPath = ndkBuildingDir + '/ndk-build.cmd'
//	} else {
//		ndkBuildPath = ndkBuildingDir + '/ndk-build'
//	}
	def ndkBuildPath = getNdkBuildPath();
	commandLine ndkBuildPath, '-j8', '-C', file('src/main').absolutePath
}

task ndkClean(type: Exec, description: 'clean JNI libraries') {
	println('executing ndkBuild clean')
	def ndkBuildPath = getNdkBuildPath();
	commandLine ndkBuildPath, 'clean', '-C', file('src/main').absolutePath
}

clean.dependsOn 'ndkClean'*/


dependencies {
//    compile fileTree(dir: new File(buildDir, 'libs'), include: '*.jar')
    implementation fileTree(dir: new File(buildDir, 'libs'), include: '*.jar')

	implementation "com.android.support:support-v4:${supportLibVersion}"
	implementation "com.android.support:support-annotations:${supportLibVersion}"

	implementation("com.serenegiant:common:${commonLibVersion}") {
		exclude module: 'support-v4'
	}
}
